-- THIS FILE WAS AUTOMATICALLY GENERATED BY AENEAS
-- [kanon]
import Base
open Primitives
set_option linter.dupNamespace false
set_option linter.hashCommand false
set_option linter.unusedVariables false

namespace kanon

/- [kanon::Record]
   Source: 'src/kanon.rs', lines 5:0-9:1 -/
structure Record where
  age : U32
  zip : U32
  salary : U32

/- [kanon::{core::clone::Clone for kanon::Record}#2::clone]:
   Source: 'src/kanon.rs', lines 4:9-4:14 -/
def ClonekanonRecord.clone (self : Record) : Result Record :=
  do
    let i <- core.clone.CloneU32.clone self.age
    let i1 <- core.clone.CloneU32.clone self.zip
    let i2 <- core.clone.CloneU32.clone self.salary
    Result.ok { age := i, zip := i1, salary := i2 }

/- Trait implementation: [kanon::{core::clone::Clone for kanon::Record}#2]
   Source: 'src/kanon.rs', lines 4:9-4:14 -/
@[reducible]
def core.clone.ClonekanonRecord : core.clone.Clone Record := {
  clone := ClonekanonRecord.clone
}

/- [kanon::{kanon::Record}::is_similar]:
   Source: 'src/kanon.rs', lines 12:4-14:5 -/
def Record.is_similar (self : Record) (other : Record) : Result Bool :=
  if self.age = other.age
  then Result.ok (self.zip = other.zip)
  else Result.ok false

/- [kanon::KAnonymity]
   Source: 'src/kanon.rs', lines 17:0-20:1 -/
structure KAnonymity where
  data : alloc.vec.Vec Record
  k : Usize

/- [kanon::{kanon::KAnonymity}#1::new]:
   Source: 'src/kanon.rs', lines 23:4-25:5 -/
def KAnonymity.new
  (data : alloc.vec.Vec Record) (k : Usize) : Result KAnonymity :=
  Result.ok { data, k }

/- [kanon::{kanon::KAnonymity}#1::count_similar_rows]: loop 0:
   Source: 'src/kanon.rs', lines 30:8-35:9 -/
divergent def KAnonymity.count_similar_rows_loop
  (self : KAnonymity) (row : Record) (n_similar : Usize) (i : Usize) :
  Result Usize
  :=
  let i1 := alloc.vec.Vec.len self.data
  if i < i1
  then
    do
    let r ←
      alloc.vec.Vec.index (core.slice.index.SliceIndexUsizeSliceTInst Record)
        self.data i
    let b ← Record.is_similar row r
    if b
    then
      do
      let n_similar1 ← n_similar + 1#usize
      let i2 ← i + 1#usize
      KAnonymity.count_similar_rows_loop self row n_similar1 i2
    else
      do
      let i2 ← i + 1#usize
      KAnonymity.count_similar_rows_loop self row n_similar i2
  else Result.ok n_similar

/- [kanon::{kanon::KAnonymity}#1::count_similar_rows]:
   Source: 'src/kanon.rs', lines 27:4-37:5 -/
def KAnonymity.count_similar_rows
  (self : KAnonymity) (row : Record) : Result Usize :=
  KAnonymity.count_similar_rows_loop self row 0#usize 0#usize

/- [kanon::{kanon::KAnonymity}#1::anonymize]: loop 0:
   Source: 'src/kanon.rs', lines 42:8-48:9 -/
divergent def KAnonymity.anonymize_loop
  (self : KAnonymity) (anonymized_data : alloc.vec.Vec Record) (i : Usize) :
  Result (alloc.vec.Vec Record)
  :=
  let i1 := alloc.vec.Vec.len self.data
  if i < i1
  then
    do
    let r ←
      alloc.vec.Vec.index (core.slice.index.SliceIndexUsizeSliceTInst Record)
        self.data i
    let row ← ClonekanonRecord.clone r
    let i2 ← KAnonymity.count_similar_rows self row
    if i2 >= self.k
    then
      do
      let anonymized_data1 ← alloc.vec.Vec.push anonymized_data row
      let i3 ← i + 1#usize
      KAnonymity.anonymize_loop self anonymized_data1 i3
    else
      do
      let i3 ← i + 1#usize
      KAnonymity.anonymize_loop self anonymized_data i3
  else Result.ok anonymized_data

/- [kanon::{kanon::KAnonymity}#1::anonymize]:
   Source: 'src/kanon.rs', lines 39:4-50:5 -/
def KAnonymity.anonymize (self : KAnonymity) : Result (alloc.vec.Vec Record) :=
  KAnonymity.anonymize_loop self (alloc.vec.Vec.new Record) 0#usize

end kanon
